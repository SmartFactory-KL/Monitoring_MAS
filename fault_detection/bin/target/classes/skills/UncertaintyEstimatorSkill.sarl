/** 
 * 
 */
package skills

import capacities.UncertaintyEstimatorCapacity
import io.sarl.core.Logging
import java.util.Random
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementCollection
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementList
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElement
import org.eclipse.digitaltwin.aas4j.v3.model.ReferenceElement
import java.util.NoSuchElementException
import java.util.List
import java.util.ArrayList

/** 
 * @author Alexis Bernhard
 * 
 */
skill UncertaintyEstimatorSkill implements UncertaintyEstimatorCapacity {
	uses Logging

	/** 
	 * Retrieves the estimated action uncertainty of one skill (given by the skillId) on the managed resource. 
	 */
	private def estimate_action_uncertainty(skillId : String) : double[] {
		var random : Random = new Random()
		var sublist : double[] = random.doubles(2).toArray
		var result : double[] = #[sublist.get(0), sublist.get(1), 1.0]
		info("Action uncertainty: [" + result.get(0) + ", " + result.get(1) + ", " + result.get(2) + "]")
		return result;
	}

	/** 
	 * Fused all uncertainties in the list given in the uncertainties argument by applying a Bayesian Fusion algorithm.
	 * This algorithm is only suitable for Gaussian distributions and is represented as array with the mean is first entry,
	 * the variance f a given distribution as second value and the weight of the Fusion as third value.
	 * The weight is an integer weight to represent the weight of a Kalman Filter entry towards all entries.
	 */
	private def fuse(uncertainties : List<double[]>) : double[] {
		if (uncertainties.length > 0) {
			var meanFused : double = uncertainties.get(0).get(0); // Start with the first sensor's mean
			var varianceFused : double = uncertainties.get(0).get(1); // Start with the first sensor's variance
			var weight : double = uncertainties.get(0).get(2);
			// Combine each subsequent sensor's measurements
			for (var i : int = 1; i < uncertainties.length; i++) {
				var mean : double = uncertainties.get(i).get(0);
				var variance : double = uncertainties.get(i).get(1);
				var subweight : double = uncertainties.get(i).get(2);

				meanFused = (meanFused * weight + mean * subweight) / (weight + weight);
				varianceFused = ((weight * (varianceFused + meanFused * meanFused) +
					subweight * (variance + mean * mean)) / (subweight + weight)) - meanFused * meanFused;
				weight += subweight;
			}
			return #[meanFused, varianceFused, weight];
		} else {
			return null;
		}
	}

	/*** 
	 * This method calculates the uncertainty of a given step as argument and returns the fused uncertainty value.
	 */
	def calculateUncertainty(step : SubmodelElementCollection) : double[] {
		var uncertainties : List<double[]> = new ArrayList()
		var substepresult = subStepUncertaintyCalculation(step)
		if (substepresult !== null) {
			uncertainties.add(substepresult)
		}
		var actions = step.getAASElement("Actions") as SubmodelElementList
		if (actions !== null) {
			for (action : actions.value) {
				var actionSMC = action as SubmodelElementCollection
				var actionReference = actionSMC.getAASElement("SkillReference") as ReferenceElement;
				var skillRef : String = actionReference.value.keys.get(0).value
				// TODO Get skill id of referenced skill
				var actionUncertainty = this.estimate_action_uncertainty(skillRef)
				uncertainties.add(actionUncertainty)
			}
		}
		return this.fuse(uncertainties);
	}

	/** 
	 * This routine represents the uncertainty of a substep und fetches all uncertainty of itschilds and returns one shared uncerainty to the product holen.
	 * 
	 */
	private def subStepUncertaintyCalculation(step : SubmodelElementCollection) : double[] {
		var uncertainties : List<double[]> = new ArrayList()
		var substeps = step.getAASElement("Substeps") as SubmodelElementList
		if (substeps !== null) {
			for (substep : substeps.value) {
				var substepSMC = substep as SubmodelElementCollection
				var substepUncertainty = this.calculateUncertainty(substepSMC)
				uncertainties.add(substepUncertainty)
			}
		}
		return this.fuse(uncertainties)
	}

	new() {
	}

	/** 
	 * This is a helper method to access entries in Basyx more easy. 
	 */
	def getAASElement(smc : SubmodelElementCollection, idShort : String) : SubmodelElement {
		try {
			var result = smc.getValue().stream().filter([sme|sme.getIdShort().contains(idShort)]).findFirst().get()
			return result
		} catch (e : NoSuchElementException) {
			warning("The AAS element " + idShort + " could not be found in smc " + smc.idShort)
		}
		return null;
	}
}
