/** 
 * 
 */
package skills

import capacities.SharedResourceCapacity
import java.util.Map
import java.util.HashMap
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementCollection
import java.util.List
import java.util.ArrayList

/** 
 * Stores shared resource data required for parallel execution of agents.
 * @author Alexis Bernhard
 */
skill SharedResourceSkill implements SharedResourceCapacity {

	/**
	 * The counter is a major part of a barrier implementation counting all finalized agent executions waiting at the barrier for other agents. The mapping maps a production step on the number of witing agents for this production step.
	 */
	var counter : Map<String, Integer> = new HashMap<String, Integer>()
	
	/**
	 * Contains all parallel calculated uncertainties. This list allows parallelization safe map updates.
	 */
	var uncertainties : Map<String, List<SubmodelElementCollection>> = new HashMap<String, List<SubmodelElementCollection>>()
 
 	/**
 	 * Increases (increase is true) or decreases (increase is false) the counter of the production step named as key.
 	 */
	override synchronized changeCounter(key : String, increase : boolean) {
		if (increase) {
			counter.put(key, counter.get(key) + 1)
		} else {
			counter.put(key, counter.get(key) - 1)
		}
	}
 
 	/**
 	 * Adds an uncertainty content to the uncertanty list entry key. Key is a production step id.
 	 */
	override synchronized changeUncertainty(key : String, content : SubmodelElementCollection) {
		this.uncertainties.get(key).add(content)
	}

	/**
	 * Retrieves the counter which maps a production step on the number of witing agents for this production step.
	 */
	override getCounter() : Map<String, Integer> {
		return counter
	}

	/**
	 * Retrieves the shared uncertainty values between all agents.
	 */
	override getUncertainty() : Map<String, List<SubmodelElementCollection>> {
		return uncertainties
	}

	/**
	 * Retrieves the counter for the production step "key".
	 */
	override getCounter(key : String) : Integer {
		return counter.get(key)
	}

	/**
	 * Retrieves the list of uncertainties for the production step "key".
	 */
	override getUncertainty(key : String) : List<SubmodelElementCollection> {
		return uncertainties.get(key)
	}

 	/**
 	 * Adds a new production step entry to the counter.
 	 */
	override addKeyCounter(key : String) {
		counter.putIfAbsent(key, 0)
	}

	/**
 	 * Adds a new production step entry to the uncertainty list and initializes the list for the production step.
 	 */
	override addKeyUncertainty(key : String) {
		uncertainties.putIfAbsent(key, new ArrayList<SubmodelElementCollection>())
	}

	new() {
	}

}
