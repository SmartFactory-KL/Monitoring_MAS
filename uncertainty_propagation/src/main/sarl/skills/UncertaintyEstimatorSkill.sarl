/** 
 * 
 */
package skills

import capacities.UncertaintyEstimatorCapacity
import io.sarl.core.Logging
import java.util.Random
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementCollection
import org.eclipse.digitaltwin.aas4j.v3.model.Property
import java.util.List
import java.util.ArrayList

/** 
 * This skill allows an agent to estimate and propagate uncertainties.
 * @author Alexis Bernhard
 */
skill UncertaintyEstimatorSkill implements UncertaintyEstimatorCapacity {
	uses Logging

	/** 
	 * Retrieves the estimated action uncertainty of one skill (given by the skillId) on the managed resource.
	 * For simplicity reasons randomly generated numbers are taken. A deeper calculation is not part of the given paper.
	 */
	override estimate_action_uncertainty(skillId : String) : double[] {
		var random : Random = new Random()
		var sublist : double[] = random.doubles(2).toArray
		var result : double[] = #[sublist.get(0), sublist.get(1), 1.0]
		info("Action uncertainty: [" + result.get(0) + ", " + result.get(1) + ", " + result.get(2) + "]")
		return result;
	}

	/** 
	 * Fuses all uncertainties in the list given in the uncertainties argument by applying a Bayesian Fusion algorithm.
	 * This algorithm is only suitable for Gaussian distributions and is represented as array with the mean as first entry,
	 * the variance of a given distribution as second value and the weight of the Fusion as third value.
	 * The weight is an integer weight to represent the weight of a Kalman Filter entry towards all entries.
	 */
	override fuse(uncertainties : List<double[]>) : double[] {
		if (uncertainties.length > 0) {
			var meanFused : double = uncertainties.get(0).get(0); // Start with the first sensor's mean
			var varianceFused : double = uncertainties.get(0).get(1); // Start with the first sensor's variance
			var weight : double = uncertainties.get(0).get(2);
			// Combine each subsequent sensor's measurements
			info("meanFused: " + meanFused + " weight: " + weight)
			for (var i : int = 1; i < uncertainties.length; i++) {
				var mean : double = uncertainties.get(i).get(0);
				var variance : double = uncertainties.get(i).get(1);
				var subweight : double = uncertainties.get(i).get(2);
				var meanFusedOld = meanFused;
				meanFused = (meanFused * weight + mean * subweight) / (weight + subweight);
				varianceFused = (weight * (varianceFused + Math.pow(meanFusedOld - meanFused, 2)) +
					subweight * (variance + Math.pow(mean - meanFused, 2))) / (weight + subweight);
				weight += subweight;
			}
			return #[meanFused, varianceFused, weight];
		} else {
			return null;
		}
	}

	/**
	 * Fuses all uncertainties stored in the submodel element collection. For the fusion, this method extracts all uncertainties in the list and adds them to an ArrayList and fuses this array list.
	 * For a detailed description of the list content, please see the fusion method of the ArrayList in the same class.
	 */
	override fuseSMC(uncertainties : List<SubmodelElementCollection>) : double[] {
		var random : Random = new Random()
		var inputUncertainties = new ArrayList<double[]>
		for (uncertainty : uncertainties) {
			var inputArray : double[] = random.doubles(uncertainty.value.size).toArray
			for (var i = 0; i < inputArray.size; i++) {
				inputArray.set(i, Double.parseDouble((uncertainty.value.get(i) as Property).value))
			}
			inputUncertainties.add(inputArray)
		}
		return this.fuse(inputUncertainties)
	}

	new() {
	}
}
