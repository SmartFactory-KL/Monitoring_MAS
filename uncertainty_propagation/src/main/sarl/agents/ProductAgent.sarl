package agents

import io.sarl.core.Initialize
import io.sarl.core.Logging
import events.ExecutionUpdate
import events.ExecutionRequest
import org.eclipse.digitaltwin.aas4j.v3.model.Submodel
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElement
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementCollection
import org.eclipse.digitaltwin.aas4j.v3.model.Property
import java.util.List
import io.sarl.core.ExternalContextAccess
import org.eclipse.digitaltwin.aas4j.v3.model.ReferenceElement
import i40_messages.I40_MessageTypes
import i40_messages.I40_Message
import java.util.UUID
import java.util.ArrayList
import org.eclipse.digitaltwin.aas4j.v3.model.Referable
import org.eclipse.digitaltwin.aas4j.v3.model.SubmodelElementList

/** 
 * The product agent represents a product in the system and manages its execution process throughout its production.
 * @author Alexis Bernhard
 */
agent ProductAgent extends AbstractAgent {
	uses Logging, ExternalContextAccess

	/** 
	 * The production plan submodel which contains the process description inside the agent.
	 */
	var productionPlan : Submodel

	/** 
	 * The production log submodel contains all production logs generated throughout the production process towards a product.
	 */
	var productionLog : Submodel

	/** 
	 * This method triggers the execution of a given list of production steps at the resource holon.
	 */
	def executeSteps(steps : List<SubmodelElement>) {
		if (steps.size > 0) {
			var step = steps.get(0) as SubmodelElementCollection
			var resourceSMC = aasHelper.getAASChild(step, "Resource") as SubmodelElementCollection
			var resourceReference = aasHelper.getAASChild(resourceSMC, "ResourceReference") as ReferenceElement;
			var resourceId : String = resourceReference.value.keys.get(0).value.toString()
			var interactionElements : List<Referable> = new ArrayList<Referable>()
			interactionElements.addAll(steps)
			var new_message : I40_Message = message_skill.create_I40_Message(this.aas_id, resourceId,
				I40_MessageTypes.REQUIREMENT, UUID.randomUUID().toString, interactionElements)
			emit(this.comspace, new ExecutionRequest => [message = new_message])
		}
	}

	/** 
	 * This method initializes a product agent by retrieving the required submodels and trigger the execution of the production process.
	 */
	on Initialize {
		if (this.init(occurrence.parameters, "Product")) {
			productionPlan = aasHelper.getSubmodelByIdShort(aas, "ProductionPlan")
			productionLog = aasHelper.getSubmodelByIdShort(aas, "ProductionLog")
			resetAAS();
			var steps = aasHelper.getAASChild(productionPlan, "Steps") as SubmodelElementList;
			// executeSteps(steps.value)
			var heterarchicalSteps = new ArrayList<SubmodelElementCollection>
			for (step : steps.value) {
				heterarchicalSteps.addAll(transformHierachicalStep(step as SubmodelElementCollection))
			}
			steps.value.addAll(heterarchicalSteps)
			executeSteps(steps.value)
			info("Initialization process of product AAS " + aas.idShort + " completed.")
		}
	}

	/** 
	 * The execution update reacts on execution updates from the resource system by printing the result. Warning: This is a stub and can be extended in the future towards a complete production system.
	 */
	on ExecutionUpdate [occurrence.message.frame.receiver == this.aas_id] {
		info("Execution updated with SMC idshort: " + occurrence.message.interactionElements.get(0).idShort)
		var logEntry = occurrence.message.interactionElements.get(0) as SubmodelElementCollection
		var productLogEntries = aasHelper.getAASChild(productionLog, "ProductLogs") as SubmodelElementList;
		productLogEntries.value.add(logEntry)
		aasHelper.updateSubmodel(productionLog)
		// Final test output
		var dataobjects : SubmodelElementList = aasHelper.getAASChild(logEntry, "DataObjects") as SubmodelElementList
		for (dataObject : dataobjects.value) {
			var dataObjectSMC = dataObject as SubmodelElementCollection
			for (elem : dataObjectSMC.value) {
				info("Element received: " + elem.idShort)
			}
		}
	}

	/** 
	 * Resets the AAS to prepare for a new production run. This is required since this small sample works with the same AAS instead of spawning and deleting new AASs.
	 */
	def resetAAS() {
		info("Reset Production plan of AAS " + aas.idShort)
		var totalState = aasHelper.getAASChild(productionLog, "Status") as Property;
		totalState.value = "planned"
		var processLogs = aasHelper.getAASChild(productionLog, "ProcessLogs") as SubmodelElementList;
		for (step : processLogs.value) {
			var stepSMC = step as SubmodelElementCollection
			var state = aasHelper.getAASChild(stepSMC, "Status") as Property;
			if (!state.equals("planned")) {
				state.value = "planned"
			}
			var actions = aasHelper.getAASChild(stepSMC, "ActionLogs") as SubmodelElementList;
			for (action : actions.value) {
				var actionSMC = action as SubmodelElementCollection
				var actionState = aasHelper.getAASChild(actionSMC, "Status") as Property;
				if (!actionState.equals("planned")) {
					actionState.value = "planned"
				}
			}
		}
		var productLogEntries = aasHelper.getAASChild(productionLog, "ProductLogs") as SubmodelElementList;
		productLogEntries.value.clear
		aasHelper.updateSubmodel(productionLog)
	}

	/** 
	 * Transforms a hierarchical step to a flat heterarchical step to switch between hierarchical and heterarchical execution.
	 */
	def transformHierachicalStep(step : SubmodelElementCollection) : List<SubmodelElementCollection> {
		var resultSteps : List<SubmodelElementCollection> = new ArrayList<SubmodelElementCollection>
		var substeps = aasHelper.getAASChild(step, "Substeps") as SubmodelElementList
		if (substeps !== null) {
			for (substep : substeps.value) {
				var substepSMC = substep as SubmodelElementCollection
				var subStepId = (aasHelper.getAASChild(substepSMC, "StepId") as Property).value
				sharedResourceSkill.changeCounter(subStepId, true)
				resultSteps.addAll(transformHierachicalStep(substepSMC))
			}
		}
		var actions = aasHelper.getAASChild(step, "Actions") as SubmodelElementList
		if (actions !== null) {
			resultSteps.add(step)
		}
		return resultSteps
	}
}
